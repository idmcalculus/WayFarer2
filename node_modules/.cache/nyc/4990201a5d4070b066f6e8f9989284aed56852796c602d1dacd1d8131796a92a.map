{"version":3,"sources":["auth.js"],"names":["auth","signup","req","res","body","email","first_name","last_name","password","pool","query","then","result","rowCount","status","send","error","rows","id","is_admin","token","jwt","sign","_id","_email","_isadmin","header","data","user_id","signin"],"mappings":"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","sourceRoot":"C:\\Users\\idmca\\Desktop\\Andela\\way_farer\\server\\controllers","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport pool from '../models/pool'\r\n\r\nconst auth = {\r\n    signup: (req, res) => {\r\n        const {\r\n            email, first_name, last_name, password,\r\n          } = req.body;\r\n      \r\n          // check if user is already registered\r\n          pool.query(\r\n            'SELECT * FROM users WHERE email = ($1)', [email],\r\n          ).then((result)=> {\r\n            if (result.rowCount !== 0) {\r\n              return res.status(409).send({\r\n                status: \"error\",\r\n                error: \"user already exists\",\r\n              });\r\n            }\r\n          });\r\n         \r\n          \r\n          pool.query(\r\n            `INSERT INTO \"users\" (\"first_name\", \"last_name\", \"email\", \"password\")\r\n            VALUES ('${first_name}','${last_name}', '${email}', '${password}') \r\n            RETURNING *`,\r\n          ).then((result)=> {\r\n            const {\r\n              id, is_admin,\r\n            } = result.rows[0];\r\n        \r\n            const token = jwt.sign({\r\n              _id: id,\r\n              _email: result.rows[0].email,\r\n              _isadmin: is_admin,\r\n            }, \"hidelater\");\r\n        \r\n            res.header('token', token).send({\r\n              status: \"success\",\r\n              data: {\r\n                token, user_id: id, is_admin,\r\n              },\r\n            });\r\n        });\r\n      \r\n          \r\n    },\r\n    signin: (req, res) => {\r\n        const { email, password } = req.body;\r\n        // query the database\r\n        pool.query(\r\n          'SELECT * FROM users WHERE email = ($1)', [email],\r\n        ).then((result) => {\r\n          if (result.rowCount !== 1) return res.status(400).send({ status: \"error\", error: \"invalid email or password\" });\r\n    \r\n       \r\n          if (password !== result.rows[0].password) return res.status(400).send({ status: \"error\", error: \"invalid email or password\" });\r\n      \r\n          const {\r\n            id, is_admin, email: _email,\r\n          } = result.rows[0];\r\n      \r\n          const token = jwt.sign({\r\n            _id: id,\r\n            _email,\r\n            _isadmin: is_admin,\r\n          }, \"hidelater\");\r\n      \r\n          res.send({\r\n            status: 200,\r\n            data: {\r\n              token, id, is_admin,\r\n            },\r\n          });\r\n        });\r\n       \r\n    }\r\n};\r\nexport default auth;"]}