{"version":3,"sources":["bookings.js"],"names":["bookings","createBooking","req","res","body","token","user_id","is_admin","trip_id","booking_id","bus_id","seat_number","first_name","last_name","email","pool","query","then","result","send","status","data","rows","id","trip_date","first_number","err","error","getBookings","deleteBookings","bookingId","params","message"],"mappings":"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","sourceRoot":"C:\\Users\\idmca\\Desktop\\Andela\\way_farer\\server\\controllers","sourcesContent":["import pool from \"../models/pool\";\r\n\r\nconst bookings = {\r\n    createBooking: (req, res) => {\r\n        const { \r\n            token,\r\n            user_id,\r\n            is_admin,\r\n            trip_id,\r\n            booking_id,\r\n            bus_id,\r\n            seat_number,\r\n            first_name,\r\n            last_name,\r\n            email            \r\n         } = req.body;\r\n       \r\n    pool.query(`INSERT INTO \r\n    bookings(booking_id, bus_id, seat_number, first_name, last_name, email)\r\n    VALUES($1, $2, $3, $4, $5, $6)\r\n    RETURNING *`,\r\n    [booking_id, bus_id, seat_number, first_name, last_name, email])\r\n    .then((result) => {\r\n        res.send({\r\n            status: \"success\",\r\n            data: {\r\n                booking_id: result.rows[0].booking_id,\r\n                user_id: result.rows[0].id,\r\n                trip_id: result.rows[0].id,\r\n                bus_id: result.rows[0].bus_id,\r\n                trip_date: result.rows[0].trip_date,\r\n                seat_number: result.rows[0].seat_number,\r\n                first_name: result.rows[0].first_number,\r\n                last_name: result.rows[0].last_name,\r\n                email: result.rows[0].email,\r\n            }\r\n        });\r\n    })\r\n    .catch((err) => {\r\n        res.status(500).send({\r\n            status: \"error\",\r\n            error: \"internal server error\"\r\n        });\r\n    });\r\n    \r\n    },\r\n    getBookings: (req, res) => {\r\n        pool.query(`SELECT * FROM bookings;`)\r\n        .then((result) => {\r\n            res.send({\r\n                status: \"success\",\r\n                data: result.rows,\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            res.status(500).send({\r\n            status: \"error\",\r\n            error: \"internal server error\"\r\n        });\r\n    });\r\n    },\r\n\r\n    deleteBookings: (req, res) => {\r\n        const bookingId = req.params.bookingId;\r\n        pool.query(`DELETE FROM bookings WHERE booking_id = ($1)\r\n        RETURNING *;`,\r\n        [bookingId],\r\n        )\r\n        .then((result) => {\r\n            res.status(201).send({\r\n                status: \"success\",\r\n                data: {\r\n                    message: \"Booking deleted successfuly\",\r\n                },\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            res.status(500).send({\r\n            status: \"error\",\r\n            error: \"internal server error\"\r\n        });\r\n    });\r\n    }\r\n};\r\nexport default bookings;"]}